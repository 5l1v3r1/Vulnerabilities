package com.wrlus.btdoor.service;

import android.app.Service;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothProfile;
import android.content.Intent;
import android.os.IBinder;
import android.util.Log;

import androidx.annotation.Nullable;

import com.wrlus.btdoor.profile.BluetoothHiddenProfile;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class PanService extends Service {
    private static final String TAG = "PanService";
//    xiaolu-pi4b - DC:A6:32:15:3B:1F
    private static final String BT_ADDR = "DC:A6:32:15:3B:1F";
    private BluetoothAdapter mBtAdapter;
    private BluetoothProfile mBtProfile;

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        throw new UnsupportedOperationException("onBind unsupported");
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        mBtAdapter = BluetoothAdapter.getDefaultAdapter();
        if (mBtAdapter == null) {
            return super.onStartCommand(intent, flags, startId);
        }
        mBtAdapter.getProfileProxy(this, new ServiceListener(), BluetoothHiddenProfile.PAN);
        final BluetoothDevice btDevice = getBtDevice(BT_ADDR);
        Thread connectThread = new Thread(new Runnable() {
            @Override
            public void run() {
                do {
                    if (btDevice.getBondState() != BluetoothDevice.BOND_BONDING) {
                        Log.d(TAG, "connectThread, try to create bond");
                        btDevice.createBond();
                    } else {
                        Log.d(TAG, "connectThread, during bonding, skipped");
                    }
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        Log.e(TAG, "connectThread, connect interrupted");
                    }
                } while (btDevice.getBondState() != BluetoothDevice.BOND_BONDED);
                Log.i(TAG, "connectThread, create bond OK");
                do {
                    if (mBtProfile.getConnectionState(btDevice) != BluetoothProfile.STATE_CONNECTING) {
                        Log.d(TAG, "connectThread, try to connect");
                        connect(btDevice);
                    } else {
                        Log.d(TAG, "connectThread, during connecting, skipped");
                    }
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        Log.e(TAG, "connectThread, connect interrupted");
                    }
                } while(mBtProfile.getConnectionState(btDevice) != BluetoothProfile.STATE_CONNECTED);
                Log.i(TAG, "connectThread, connect OK");
                do {
                    try {
                        Thread.sleep(3000);
                    } catch (InterruptedException e) {
                        Log.e(TAG, "connectThread, getConnectedDevices interrupted");
                    }
                } while(mBtProfile.getConnectionState(btDevice) == BluetoothProfile.STATE_CONNECTED);
                Thread connectThread = new Thread(this);
                connectThread.setDaemon(true);
                Log.d(TAG, "connectThread, lost connection, restart thread itself");
                connectThread.start();
            }
        });
        connectThread.setDaemon(true);
        connectThread.start();
        return super.onStartCommand(intent, flags, startId);
    }

    public BluetoothDevice getBtDevice(String btAddress) {
        try {
            Constructor<BluetoothDevice> constructor = BluetoothDevice.class.getDeclaredConstructor(String.class);
            constructor.setAccessible(true);
            return constructor.newInstance(btAddress);
        } catch(NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException e) {
            Log.e(TAG, "NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException");
            e.printStackTrace();
        }
        return null;
    }

    public boolean connect(BluetoothDevice btDevice) {
        if (mBtProfile == null || btDevice == null) {
            return false;
        }
        try {
            Method method = Class.forName("android.bluetooth.BluetoothPan")
                    .getDeclaredMethod("connect", BluetoothDevice.class);
            return (Boolean) method.invoke(mBtProfile, btDevice);
        } catch (ClassNotFoundException | NoSuchMethodException e) {
            Log.e(TAG, "connect, ClassNotFoundException | NoSuchMethodException");
            e.printStackTrace();
        } catch (IllegalAccessException | InvocationTargetException e) {
            Log.e(TAG, "connect, IllegalAccessException | InvocationTargetException");
            e.printStackTrace();
        }
        return false;
    }

    class ServiceListener implements BluetoothProfile.ServiceListener {

        @Override
        public void onServiceConnected(int profile, BluetoothProfile proxy) {
            Log.i(TAG, "onServiceConnected, profile="+profile);
            if (profile == BluetoothHiddenProfile.PAN) {
                mBtProfile = proxy;
            }
        }

        @Override
        public void onServiceDisconnected(int profile) {
            Log.i(TAG, "onServiceDisconnected, profile="+profile);
        }
    }
}
